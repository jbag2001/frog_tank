/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef GRAPHS_SCREENVIEWBASE_HPP
#define GRAPHS_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/graphs_screen_screen/graphs_screenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/graph/GraphScroll.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/graph/Graph.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class graphs_screenViewBase : public touchgfx::View<graphs_screenPresenter>
{
public:
    graphs_screenViewBase();
    virtual ~graphs_screenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void graphDay()
    {
        // Override and implement this function in graphs_screen
    }
    virtual void graphHour()
    {
        // Override and implement this function in graphs_screen
    }
    virtual void graphMonth()
    {
        // Override and implement this function in graphs_screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box bg;
    touchgfx::GraphScroll<60> live_graph;
    touchgfx::GraphElementGridX live_graphMajorXAxisGrid;
    touchgfx::GraphElementGridY live_graphMajorYAxisGrid;
    touchgfx::GraphLabelsY live_graphMajorYAxisLabel;
    touchgfx::GraphElementLine live_graphLine1;
    touchgfx::PainterRGB565 live_graphLine1Painter;
    touchgfx::Graph<60> graph;
    touchgfx::GraphElementGridX graphMajorXAxisGrid;
    touchgfx::GraphElementGridY graphMajorYAxisGrid;
    touchgfx::GraphLabelsY graphMajorYAxisLabel;
    touchgfx::GraphElementDots graphDots1;
    touchgfx::PainterRGB565 graphDots1Painter;
    touchgfx::GraphElementLine graphLine1;
    touchgfx::PainterRGB565 graphLine1Painter;
    touchgfx::ScalableImage close_icon;
    touchgfx::ClickListener< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  > close_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  month_btn;
    touchgfx::BoxWithBorder month_bg;
    touchgfx::TextArea month_label;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  day_btn;
    touchgfx::BoxWithBorder day_bg;
    touchgfx::TextArea day_label;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hour_btn;
    touchgfx::BoxWithBorder hour_bg;
    touchgfx::TextArea hour_label;
    touchgfx::TextArea graph_title_hot_temp;
    touchgfx::TextArea graph_title_hot_hum;
    touchgfx::TextArea graph_title_cold_temp;
    touchgfx::TextArea graph_title_cold_hum;
    touchgfx::TextArea temp_label;
    touchgfx::TextArea hum_label;
    touchgfx::TextArea time_month_label;
    touchgfx::TextArea time_day_label;
    touchgfx::TextArea time_hour_label;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<graphs_screenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // GRAPHS_SCREENVIEWBASE_HPP
