/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef HOME_SCREENVIEWBASE_HPP
#define HOME_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/home_screen_screen/home_screenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>

class home_screenViewBase : public touchgfx::View<home_screenPresenter>
{
public:
    home_screenViewBase();
    virtual ~home_screenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void set_hot_temp()
    {
        // Override and implement this function in home_screen
    }
    virtual void set_hot_hum()
    {
        // Override and implement this function in home_screen
    }
    virtual void set_cold_temp()
    {
        // Override and implement this function in home_screen
    }
    virtual void set_cold_hum()
    {
        // Override and implement this function in home_screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box bg;
    touchgfx::BoxWithBorder hot_bg;
    touchgfx::BoxWithBorder cold_bg;
    touchgfx::TextArea hot_label;
    touchgfx::TextArea cold_label;
    touchgfx::TextAreaWithOneWildcard hot_hum_disp;
    touchgfx::TextAreaWithOneWildcard hot_temp_disp;
    touchgfx::TextArea hot_temp_sup;
    touchgfx::TextArea hot_hum_sup;
    touchgfx::TextArea cold_hum_sup;
    touchgfx::TextAreaWithOneWildcard cold_temp_disp;
    touchgfx::TextArea cold_temp_sup;
    touchgfx::TextAreaWithOneWildcard cold_hum_disp;
    touchgfx::ScalableImage remove_frog;
    touchgfx::ScalableImage alerts_icon;
    touchgfx::ClickListener< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  > alerts_btn;
    touchgfx::ScalableImage settings_icon;
    touchgfx::ClickListener< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  > settings_btn;
    touchgfx::ScalableImage mist_icn;
    touchgfx::Circle mist_circ;
    touchgfx::PainterRGB565 mist_circPainter;
    touchgfx::Circle mist_disb_circ;
    touchgfx::PainterRGB565 mist_disb_circPainter;
    touchgfx::Line mist_disb_line;
    touchgfx::PainterRGB565 mist_disb_linePainter;
    touchgfx::ScalableImage heat_icn;
    touchgfx::Circle heat_circ;
    touchgfx::PainterRGB565 heat_circPainter;
    touchgfx::Circle heat_disb_circ;
    touchgfx::PainterRGB565 heat_disb_circPainter;
    touchgfx::Line heat_disb_line;
    touchgfx::PainterRGB565 heat_disb_linePainter;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  cold_hum_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  cold_temp_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hot_hum_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hot_temp_btn;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HOT_HUM_DISP_SIZE = 3;
    touchgfx::Unicode::UnicodeChar hot_hum_dispBuffer[HOT_HUM_DISP_SIZE];
    static const uint16_t HOT_TEMP_DISP_SIZE = 3;
    touchgfx::Unicode::UnicodeChar hot_temp_dispBuffer[HOT_TEMP_DISP_SIZE];
    static const uint16_t COLD_TEMP_DISP_SIZE = 3;
    touchgfx::Unicode::UnicodeChar cold_temp_dispBuffer[COLD_TEMP_DISP_SIZE];
    static const uint16_t COLD_HUM_DISP_SIZE = 3;
    touchgfx::Unicode::UnicodeChar cold_hum_dispBuffer[COLD_HUM_DISP_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<home_screenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // HOME_SCREENVIEWBASE_HPP
