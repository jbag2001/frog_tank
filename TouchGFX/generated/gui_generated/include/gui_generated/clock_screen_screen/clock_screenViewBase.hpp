/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CLOCK_SCREENVIEWBASE_HPP
#define CLOCK_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/clock_screen_screen/clock_screenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class clock_screenViewBase : public touchgfx::View<clock_screenPresenter>
{
public:
    clock_screenViewBase();
    virtual ~clock_screenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void hourChange(int value)
    {
        // Override and implement this function in clock_screen
    }
    virtual void minChange(int value)
    {
        // Override and implement this function in clock_screen
    }
    virtual void lowHour()
    {
        // Override and implement this function in clock_screen
    }
    virtual void incHour()
    {
        // Override and implement this function in clock_screen
    }
    virtual void lowMin()
    {
        // Override and implement this function in clock_screen
    }
    virtual void incMin()
    {
        // Override and implement this function in clock_screen
    }
    virtual void updateTime()
    {
        // Override and implement this function in clock_screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box bg;
    touchgfx::Slider minute_slider;
    touchgfx::Slider hour_slider;
    touchgfx::ClickListener< touchgfx::ScalableImage > cancel_icon;
    touchgfx::ScalableImage confirm_icon;
    touchgfx::Image min_bwd;
    touchgfx::Image hour_bwd;
    touchgfx::Image min_fwd;
    touchgfx::Image hour_fwd;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hour_bwd_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hour_fwd_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  min_bwd_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  min_fwd_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  cancel_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  confirm_btn;
    touchgfx::TextArea hour_label;
    touchgfx::TextAreaWithOneWildcard hour_text;
    touchgfx::TextArea min_label;
    touchgfx::TextAreaWithOneWildcard min_text;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HOUR_TEXT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar hour_textBuffer[HOUR_TEXT_SIZE];
    static const uint16_t MIN_TEXT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar min_textBuffer[MIN_TEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<clock_screenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<clock_screenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // CLOCK_SCREENVIEWBASE_HPP
