/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGS_SCREENVIEWBASE_HPP
#define SETTINGS_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settings_screen_screen/settings_screenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class settings_screenViewBase : public touchgfx::View<settings_screenPresenter>
{
public:
    settings_screenViewBase();
    virtual ~settings_screenViewBase();
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
    

    /*
     * Virtual Action Handlers
     */
    virtual void toggleHeating()
    {
        // Override and implement this function in settings_screen
    }
    virtual void toggleMisting()
    {
        // Override and implement this function in settings_screen
    }
    virtual void lowTemp()
    {
        // Override and implement this function in settings_screen
    }
    virtual void incTemp()
    {
        // Override and implement this function in settings_screen
    }
    virtual void lowHum()
    {
        // Override and implement this function in settings_screen
    }
    virtual void incHum()
    {
        // Override and implement this function in settings_screen
    }
    virtual void tempChange(int value)
    {
        // Override and implement this function in settings_screen
    }
    virtual void humChange(int value)
    {
        // Override and implement this function in settings_screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box bg;
    touchgfx::ClickListener< touchgfx::ScalableImage > close_icon;
    touchgfx::ClickListener< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  > close_btn;
    touchgfx::Line header_bar;
    touchgfx::PainterRGB565 header_barPainter;
    touchgfx::TextArea header;
    touchgfx::TextArea heat_label;
    touchgfx::ToggleButton heat_toggle;
    touchgfx::TextArea mist_label;
    touchgfx::ToggleButton mist_toggle;
    touchgfx::Slider temp_slider;
    touchgfx::Image temp_bwd;
    touchgfx::Image temp_fwd;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  temp_bwd_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  temp_fwd_btn;
    touchgfx::TextArea temp_label;
    touchgfx::TextAreaWithOneWildcard temp_val;
    touchgfx::Slider hum_slider;
    touchgfx::Image hum_bwd;
    touchgfx::Image hum_fwd;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hum_bwd_btn;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hum_fwd_btn;
    touchgfx::TextArea hum_label;
    touchgfx::TextAreaWithOneWildcard hum_val;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEMP_VAL_SIZE = 3;
    touchgfx::Unicode::UnicodeChar temp_valBuffer[TEMP_VAL_SIZE];
    static const uint16_t HUM_VAL_SIZE = 3;
    touchgfx::Unicode::UnicodeChar hum_valBuffer[HUM_VAL_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<settings_screenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<settings_screenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<settings_screenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // SETTINGS_SCREENVIEWBASE_HPP
