/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/settings_screen_screen/settings_screenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

settings_screenViewBase::settings_screenViewBase() :
    flexButtonCallback(this, &settings_screenViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &settings_screenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &settings_screenViewBase::sliderValueChangedCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    bg.setPosition(0, 0, 480, 272);
    bg.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(bg);

    close_icon.setBitmap(touchgfx::Bitmap(BITMAP_CLOSE_ICON_ID));
    close_icon.setPosition(395, 5, 80, 80);
    close_icon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(close_icon);

    close_btn.setBoxWithBorderPosition(0, 0, 80, 81);
    close_btn.setBorderSize(5);
    close_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    close_btn.setAlpha(0);
    close_btn.setAction(flexButtonCallback);
    close_btn.setPosition(395, 4, 80, 81);
    add(close_btn);

    header_bar.setPosition(0, 0, 395, 58);
    header_barPainter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    header_bar.setPainter(header_barPainter);
    header_bar.setStart(10, 40);
    header_bar.setEnd(385, 40);
    header_bar.setLineWidth(1);
    header_bar.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(header_bar);

    header.setXY(16, 15);
    header.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    header.setLinespacing(0);
    header.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U65J));
    add(header);

    heat_label.setXY(92, 56);
    heat_label.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    heat_label.setLinespacing(0);
    heat_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BN13));
    add(heat_label);

    heat_toggle.setXY(16, 51);
    heat_toggle.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUNDED_SMALL_ON_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUNDED_SMALL_OFF_LIGHT_ID));
    heat_toggle.setAction(buttonCallback);
    add(heat_toggle);

    mist_label.setXY(92, 97);
    mist_label.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    mist_label.setLinespacing(0);
    mist_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7R3W));
    add(mist_label);

    mist_toggle.setXY(16, 92);
    mist_toggle.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUNDED_SMALL_ON_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUNDED_SMALL_OFF_LIGHT_ID));
    mist_toggle.setAction(buttonCallback);
    add(mist_toggle);

    temp_slider.setXY(48, 160);
    temp_slider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID));
    temp_slider.setupHorizontalSlider(16, 11, 0, 0, 200);
    temp_slider.setValueRange(65, 80);
    temp_slider.setValue(65);
    temp_slider.setNewValueCallback(sliderValueChangedCallback);
    add(temp_slider);

    temp_bwd.setXY(14, 164);
    temp_bwd.setBitmap(touchgfx::Bitmap(BITMAP_BACK_ID));
    add(temp_bwd);

    temp_fwd.setXY(286, 162);
    temp_fwd.setBitmap(touchgfx::Bitmap(BITMAP_NEXT_ID));
    add(temp_fwd);

    temp_bwd_btn.setBoxWithBorderPosition(0, 0, 32, 32);
    temp_bwd_btn.setBorderSize(5);
    temp_bwd_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    temp_bwd_btn.setAlpha(0);
    temp_bwd_btn.setAction(flexButtonCallback);
    temp_bwd_btn.setPosition(14, 162, 32, 32);
    add(temp_bwd_btn);

    temp_fwd_btn.setBoxWithBorderPosition(0, 0, 32, 32);
    temp_fwd_btn.setBorderSize(5);
    temp_fwd_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    temp_fwd_btn.setAlpha(0);
    temp_fwd_btn.setAction(flexButtonCallback);
    temp_fwd_btn.setPosition(286, 162, 32, 32);
    add(temp_fwd_btn);

    temp_label.setXY(48, 136);
    temp_label.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    temp_label.setLinespacing(0);
    temp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7VAJ));
    add(temp_label);

    temp_val.setXY(192, 136);
    temp_val.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    temp_val.setLinespacing(0);
    Unicode::snprintf(temp_valBuffer, TEMP_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_U7HD).getText());
    temp_val.setWildcard(temp_valBuffer);
    temp_val.resizeToCurrentText();
    temp_val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NLOW));
    add(temp_val);

    hum_slider.setXY(48, 228);
    hum_slider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID));
    hum_slider.setupHorizontalSlider(16, 11, 0, 0, 200);
    hum_slider.setValueRange(20, 90);
    hum_slider.setValue(20);
    hum_slider.setNewValueCallback(sliderValueChangedCallback);
    add(hum_slider);

    hum_bwd.setXY(14, 232);
    hum_bwd.setBitmap(touchgfx::Bitmap(BITMAP_BACK_ID));
    add(hum_bwd);

    hum_fwd.setXY(286, 230);
    hum_fwd.setBitmap(touchgfx::Bitmap(BITMAP_NEXT_ID));
    add(hum_fwd);

    hum_bwd_btn.setBoxWithBorderPosition(0, 0, 32, 32);
    hum_bwd_btn.setBorderSize(5);
    hum_bwd_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    hum_bwd_btn.setAlpha(0);
    hum_bwd_btn.setAction(flexButtonCallback);
    hum_bwd_btn.setPosition(14, 230, 32, 32);
    add(hum_bwd_btn);

    hum_fwd_btn.setBoxWithBorderPosition(0, 0, 32, 32);
    hum_fwd_btn.setBorderSize(5);
    hum_fwd_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    hum_fwd_btn.setAlpha(0);
    hum_fwd_btn.setAction(flexButtonCallback);
    hum_fwd_btn.setPosition(286, 230, 32, 32);
    add(hum_fwd_btn);

    hum_label.setXY(48, 204);
    hum_label.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hum_label.setLinespacing(0);
    hum_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R0KW));
    add(hum_label);

    hum_val.setXY(149, 204);
    hum_val.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hum_val.setLinespacing(0);
    Unicode::snprintf(hum_valBuffer, HUM_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KJOH).getText());
    hum_val.setWildcard(hum_valBuffer);
    hum_val.resizeToCurrentText();
    hum_val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6SPS));
    add(hum_val);
}

settings_screenViewBase::~settings_screenViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void settings_screenViewBase::setupScreen()
{

}

void settings_screenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &close_btn)
    {
        //goHome
        //When close_btn clicked change screen to home_screen
        //Go to home_screen with screen transition towards North
        application().gotohome_screenScreenSlideTransitionNorth();
    }
    if (&src == &temp_bwd_btn)
    {
        //lowTemp
        //When temp_bwd_btn clicked call virtual function
        //Call lowTemp
        lowTemp();
    }
    if (&src == &temp_fwd_btn)
    {
        //incTemp
        //When temp_fwd_btn clicked call virtual function
        //Call incTemp
        incTemp();
    }
    if (&src == &hum_bwd_btn)
    {
        //lowHum
        //When hum_bwd_btn clicked call virtual function
        //Call lowHum
        lowHum();
    }
    if (&src == &hum_fwd_btn)
    {
        //incHum
        //When hum_fwd_btn clicked call virtual function
        //Call incHum
        incHum();
    }
}

void settings_screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &heat_toggle)
    {
        //toggleHeating
        //When heat_toggle clicked call virtual function
        //Call toggleHeating
        toggleHeating();
    }
    if (&src == &mist_toggle)
    {
        //toggleMisting
        //When mist_toggle clicked call virtual function
        //Call toggleMisting
        toggleMisting();
    }
}

void settings_screenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &temp_slider)
    {
        //tempChange
        //When temp_slider value changed call virtual function
        //Call tempChange
        tempChange(value);
    }
    if (&src == &hum_slider)
    {
        //humChange
        //When hum_slider value changed call virtual function
        //Call humChange
        humChange(value);
    }
}
