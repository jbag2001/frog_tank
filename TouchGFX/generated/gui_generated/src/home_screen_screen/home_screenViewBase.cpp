/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/home_screen_screen/home_screenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

home_screenViewBase::home_screenViewBase() :
    flexButtonCallback(this, &home_screenViewBase::flexButtonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    bg.setPosition(0, 0, 480, 272);
    bg.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(bg);

    hot_bg.setPosition(10, 10, 170, 253);
    hot_bg.setColor(touchgfx::Color::getColorFromRGB(246, 157, 44));
    hot_bg.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hot_bg.setBorderSize(1);
    add(hot_bg);

    cold_bg.setPosition(190, 10, 170, 253);
    cold_bg.setColor(touchgfx::Color::getColorFromRGB(58, 149, 221));
    cold_bg.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    cold_bg.setBorderSize(1);
    add(cold_bg);

    hot_label.setXY(49, 126);
    hot_label.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hot_label.setLinespacing(0);
    hot_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OV86));
    add(hot_label);

    cold_label.setXY(225, 126);
    cold_label.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    cold_label.setLinespacing(0);
    cold_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OP3B));
    add(cold_label);

    dg_clk_btn.setBoxWithBorderPosition(0, 0, 100, 25);
    dg_clk_btn.setBorderSize(5);
    dg_clk_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    dg_clk_btn.setAlpha(0);
    dg_clk_btn.setAction(flexButtonCallback);
    dg_clk_btn.setPosition(135, 5, 100, 25);
    add(dg_clk_btn);

    dg_clk_bg.setPosition(135, 5, 100, 25);
    dg_clk_bg.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    dg_clk_bg.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    dg_clk_bg.setBorderSize(1);
    add(dg_clk_bg);

    dg_clk.setPosition(135, 5, 100, 25);
    dg_clk.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    dg_clk.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F8LB));
    dg_clk.displayLeadingZeroForHourIndicator(true);
    dg_clk.setDisplayMode(touchgfx::DigitalClock::DISPLAY_12_HOUR_NO_SECONDS);
    dg_clk.setTime12Hour(12, 0, 0, true);
    add(dg_clk);

    hot_hum_disp.setXY(30, 165);
    hot_hum_disp.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hot_hum_disp.setLinespacing(0);
    Unicode::snprintf(hot_hum_dispBuffer, HOT_HUM_DISP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_90P6).getText());
    hot_hum_disp.setWildcard(hot_hum_dispBuffer);
    hot_hum_disp.resizeToCurrentText();
    hot_hum_disp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UB4U));
    add(hot_hum_disp);

    hot_temp_disp.setXY(30, 30);
    hot_temp_disp.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hot_temp_disp.setLinespacing(0);
    Unicode::snprintf(hot_temp_dispBuffer, HOT_TEMP_DISP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_B5YH).getText());
    hot_temp_disp.setWildcard(hot_temp_dispBuffer);
    hot_temp_disp.resizeToCurrentText();
    hot_temp_disp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F5H7));
    add(hot_temp_disp);

    hot_temp_sup.setXY(119, 45);
    hot_temp_sup.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hot_temp_sup.setLinespacing(0);
    hot_temp_sup.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EA1A));
    add(hot_temp_sup);

    hot_hum_sup.setXY(120, 180);
    hot_hum_sup.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hot_hum_sup.setLinespacing(0);
    hot_hum_sup.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C7JE));
    add(hot_hum_sup);

    cold_hum_sup.setXY(305, 180);
    cold_hum_sup.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    cold_hum_sup.setLinespacing(0);
    cold_hum_sup.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4PGN));
    add(cold_hum_sup);

    cold_temp_disp.setXY(215, 30);
    cold_temp_disp.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    cold_temp_disp.setLinespacing(0);
    Unicode::snprintf(cold_temp_dispBuffer, COLD_TEMP_DISP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YVFU).getText());
    cold_temp_disp.setWildcard(cold_temp_dispBuffer);
    cold_temp_disp.resizeToCurrentText();
    cold_temp_disp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2669));
    add(cold_temp_disp);

    cold_temp_sup.setXY(305, 45);
    cold_temp_sup.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    cold_temp_sup.setLinespacing(0);
    cold_temp_sup.setTypedText(touchgfx::TypedText(T___SINGLEUSE_INAU));
    add(cold_temp_sup);

    cold_hum_disp.setXY(215, 165);
    cold_hum_disp.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    cold_hum_disp.setLinespacing(0);
    Unicode::snprintf(cold_hum_dispBuffer, COLD_HUM_DISP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8UZJ).getText());
    cold_hum_disp.setWildcard(cold_hum_dispBuffer);
    cold_hum_disp.resizeToCurrentText();
    cold_hum_disp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8KM9));
    add(cold_hum_disp);

    alerts_icon.setBitmap(touchgfx::Bitmap(BITMAP_ALERT_ICON_ID));
    alerts_icon.setPosition(381, 172, 80, 80);
    alerts_icon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    alerts_icon.setVisible(false);
    add(alerts_icon);

    alerts_btn.setBoxWithBorderPosition(0, 0, 80, 80);
    alerts_btn.setBorderSize(5);
    alerts_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    alerts_btn.setAlpha(0);
    alerts_btn.setVisible(false);
    alerts_btn.setAction(flexButtonCallback);
    alerts_btn.setPosition(381, 172, 80, 80);
    add(alerts_btn);

    settings_icon.setBitmap(touchgfx::Bitmap(BITMAP_SETTINGS_ICON_ID));
    settings_icon.setPosition(366, 10, 110, 110);
    settings_icon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(settings_icon);

    settings_btn.setBoxWithBorderPosition(0, 0, 80, 80);
    settings_btn.setBorderSize(5);
    settings_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    settings_btn.setAlpha(0);
    settings_btn.setAction(flexButtonCallback);
    settings_btn.setPosition(381, 25, 80, 80);
    add(settings_btn);

    mist_icn.setBitmap(touchgfx::Bitmap(BITMAP_SPRINKLER_ID));
    mist_icn.setPosition(431, 122, 30, 30);
    mist_icn.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(mist_icn);

    mist_circ.setPosition(424, 114, 45, 45);
    mist_circ.setCenter(22, 22);
    mist_circ.setRadius(20);
    mist_circ.setLineWidth(3);
    mist_circ.setArc(0, 360);
    mist_circ.setCapPrecision(180);
    mist_circPainter.setColor(touchgfx::Color::getColorFromRGB(58, 149, 221));
    mist_circ.setPainter(mist_circPainter);
    add(mist_circ);

    mist_disb_circ.setPosition(424, 114, 45, 45);
    mist_disb_circ.setCenter(22, 22);
    mist_disb_circ.setRadius(20);
    mist_disb_circ.setLineWidth(3);
    mist_disb_circ.setArc(0, 360);
    mist_disb_circ.setCapPrecision(180);
    mist_disb_circPainter.setColor(touchgfx::Color::getColorFromRGB(250, 82, 82));
    mist_disb_circ.setPainter(mist_disb_circPainter);
    add(mist_disb_circ);

    mist_disb_line.setPosition(424, 114, 45, 43);
    mist_disb_linePainter.setColor(touchgfx::Color::getColorFromRGB(250, 82, 82));
    mist_disb_line.setPainter(mist_disb_linePainter);
    mist_disb_line.setStart(8, 8);
    mist_disb_line.setEnd(35, 35);
    mist_disb_line.setLineWidth(3);
    mist_disb_line.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(mist_disb_line);

    heat_icn.setBitmap(touchgfx::Bitmap(BITMAP_LAMP_ID));
    heat_icn.setPosition(381, 122, 30, 30);
    heat_icn.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(heat_icn);

    heat_circ.setPosition(374, 114, 45, 45);
    heat_circ.setCenter(22, 22);
    heat_circ.setRadius(20);
    heat_circ.setLineWidth(3);
    heat_circ.setArc(0, 360);
    heat_circ.setCapPrecision(180);
    heat_circPainter.setColor(touchgfx::Color::getColorFromRGB(58, 149, 221));
    heat_circ.setPainter(heat_circPainter);
    add(heat_circ);

    heat_disb_circ.setPosition(374, 114, 45, 45);
    heat_disb_circ.setCenter(22, 22);
    heat_disb_circ.setRadius(20);
    heat_disb_circ.setLineWidth(3);
    heat_disb_circ.setArc(0, 360);
    heat_disb_circ.setCapPrecision(180);
    heat_disb_circPainter.setColor(touchgfx::Color::getColorFromRGB(250, 82, 82));
    heat_disb_circ.setPainter(heat_disb_circPainter);
    add(heat_disb_circ);

    heat_disb_line.setPosition(374, 114, 45, 43);
    heat_disb_linePainter.setColor(touchgfx::Color::getColorFromRGB(250, 82, 82));
    heat_disb_line.setPainter(heat_disb_linePainter);
    heat_disb_line.setStart(8, 8);
    heat_disb_line.setEnd(35, 35);
    heat_disb_line.setLineWidth(3);
    heat_disb_line.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(heat_disb_line);

    cold_hum_btn.setBoxWithBorderPosition(0, 0, 150, 60);
    cold_hum_btn.setBorderSize(5);
    cold_hum_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    cold_hum_btn.setAlpha(0);
    cold_hum_btn.setAction(flexButtonCallback);
    cold_hum_btn.setPosition(200, 180, 150, 60);
    add(cold_hum_btn);

    cold_temp_btn.setBoxWithBorderPosition(0, 0, 150, 60);
    cold_temp_btn.setBorderSize(5);
    cold_temp_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    cold_temp_btn.setAlpha(0);
    cold_temp_btn.setAction(flexButtonCallback);
    cold_temp_btn.setPosition(200, 45, 150, 60);
    add(cold_temp_btn);

    hot_hum_btn.setBoxWithBorderPosition(0, 0, 150, 60);
    hot_hum_btn.setBorderSize(5);
    hot_hum_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    hot_hum_btn.setAlpha(0);
    hot_hum_btn.setAction(flexButtonCallback);
    hot_hum_btn.setPosition(20, 180, 150, 60);
    add(hot_hum_btn);

    hot_temp_btn.setBoxWithBorderPosition(0, 0, 150, 60);
    hot_temp_btn.setBorderSize(5);
    hot_temp_btn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    hot_temp_btn.setAlpha(0);
    hot_temp_btn.setAction(flexButtonCallback);
    hot_temp_btn.setPosition(20, 45, 150, 60);
    add(hot_temp_btn);

    remove_frog.setBitmap(touchgfx::Bitmap(BITMAP_FROG_ID));
    remove_frog.setPosition(371, 160, 100, 100);
    remove_frog.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(remove_frog);
}

home_screenViewBase::~home_screenViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void home_screenViewBase::setupScreen()
{

}

void home_screenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &settings_btn)
    {
        //go_settings
        //When settings_btn clicked change screen to settings_screen
        //Go to settings_screen with screen transition towards South
        application().gotosettings_screenScreenSlideTransitionSouth();
    }
    if (&src == &alerts_btn)
    {
        //go_alerts
        //When alerts_btn clicked change screen to alerts_screen
        //Go to alerts_screen with screen transition towards South
        application().gotoalerts_screenScreenSlideTransitionSouth();
    }
    if (&src == &dg_clk_btn)
    {
        //go_clock
        //When dg_clk_btn clicked change screen to clock_screen
        //Go to clock_screen with screen transition towards South
        application().gotoclock_screenScreenSlideTransitionSouth();
    }
    if (&src == &hot_temp_btn)
    {
        //go_graph_hot_temp
        //When hot_temp_btn clicked change screen to graphs_screen
        //Go to graphs_screen with screen transition towards South
        application().gotographs_screenScreenSlideTransitionSouth();
        //set_hot_temp
        //When hot_temp_btn clicked call virtual function
        //Call set_hot_temp
        set_hot_temp();
    }
    if (&src == &hot_hum_btn)
    {
        //go_graph_hot_hum
        //When hot_hum_btn clicked change screen to graphs_screen
        //Go to graphs_screen with screen transition towards South
        application().gotographs_screenScreenSlideTransitionSouth();
        //set_hot_hum
        //When hot_hum_btn clicked call virtual function
        //Call set_hot_hum
        set_hot_hum();
    }
    if (&src == &cold_temp_btn)
    {
        //go_graph_cold_temp
        //When cold_temp_btn clicked change screen to graphs_screen
        //Go to graphs_screen with screen transition towards South
        application().gotographs_screenScreenSlideTransitionSouth();
        //set_cold_temp
        //When cold_temp_btn clicked call virtual function
        //Call set_cold_temp
        set_cold_temp();
    }
    if (&src == &cold_hum_btn)
    {
        //go_graph_cold_hum
        //When cold_hum_btn clicked change screen to graphs_screen
        //Go to graphs_screen with screen transition towards South
        application().gotographs_screenScreenSlideTransitionSouth();
        //set_cold_hum
        //When cold_hum_btn clicked call virtual function
        //Call set_cold_hum
        set_cold_hum();
    }
}
